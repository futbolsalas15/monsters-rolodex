{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","CardList","props","monsters","map","SearchBox","textToSearch","updateSearchTermListener","type","placeholder","value","onChange","e","target","App","updateSearchText","newSearchTerm","setState","searchText","state","a","fetch","response","this","json","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0UAEaA,EAAO,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACrB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAQG,GAAlC,0BACHC,IAAI,YAEN,6BAAKJ,EAAQK,OALf,QCDSC,G,MAAW,SAACC,GACvB,OACE,qBAAKN,UAAU,YAAf,SACGM,EAAMC,SAASC,KAAI,SAACT,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCPdO,EAAY,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,yBACxC,OACE,8BACE,uBACEC,KAAK,SACLC,YAAY,GACZC,MAAOJ,EACPK,SAAU,SAACC,GAAD,OAAOL,EAAyBK,EAAEC,OAAOH,aCqC5CI,E,kDAtCb,aAAe,IAAD,8BACZ,gBAcFC,iBAAmB,SAACC,GAClB,EAAKC,SAAS,CAAEC,WAAYF,KAb5B,EAAKG,MAAQ,CACXhB,SAAU,GACVe,WAAY,IALF,E,4FASd,4BAAAE,EAAA,sEACyBC,MAAM,8CAD/B,cACQC,EADR,YAGEC,KAHF,SAGkCD,EAASE,OAH3C,yBAGkBrB,SAHlB,WAGOc,SAHP,gE,0EAUA,WAAU,IAAD,EAC0BM,KAAKJ,MAA9BhB,EADD,EACCA,SAAUe,EADX,EACWA,WACZO,EAAmBtB,EAASuB,QAAO,SAAC/B,GAAD,OACvCA,EAAQK,KAAK2B,cAAcC,SAASV,EAAWS,kBAGjD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,aAAcY,EACdX,yBAA0BgB,KAAKR,mBAEjC,cAAC,EAAD,CAAUZ,SAAUsB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.34f67053.chunk.js","sourcesContent":["import \"./card.styles.css\";\r\n\r\nexport const Card = ({ monster }) => {\r\n  return (\r\n    <div className=\"card-container\">\r\n      <img\r\n        src={`https://robohash.org/${monster.id}?set=set2&size=180x180`}\r\n        alt=\"monster\"\r\n      />\r\n      <h1>{monster.name}</h1>;\r\n    </div>\r\n  );\r\n};\r\n","import { Card } from \"../card/card.component\";\r\nimport \"./card-list.styles.css\";\r\n\r\nexport const CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster}></Card>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","export const SearchBox = ({ textToSearch, updateSearchTermListener }) => {\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"\"\r\n        value={textToSearch}\r\n        onChange={(e) => updateSearchTermListener(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/searchbox/searchbox.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchText: \"\",\n    };\n  }\n\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n\n    this.setState({ monsters: await response.json() });\n  }\n\n  updateSearchText = (newSearchTerm) => {\n    this.setState({ searchText: newSearchTerm });\n  };\n\n  render() {\n    const { monsters, searchText } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          textToSearch={searchText}\n          updateSearchTermListener={this.updateSearchText}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}